// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieDB.Data;

#nullable disable

namespace MovieDB.Migrations
{
    [DbContext(typeof(MovieDbContext))]
    [Migration("20250529155800_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MovieDB.Models.Entities.Actor", b =>
                {
                    b.Property<int>("Awardable_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birth_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Awardable_ID");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("MovieDB.Models.Entities.Award", b =>
                {
                    b.Property<int>("Award_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Award_ID"));

                    b.Property<int>("Award_Year")
                        .HasColumnType("int");

                    b.Property<int?>("Awardable_ID")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Event_Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("Movie_Context_ID")
                        .HasColumnType("int");

                    b.Property<string>("Nomination_Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Nominee_Awardable_ID")
                        .HasColumnType("int");

                    b.HasKey("Award_ID");

                    b.HasIndex("Awardable_ID");

                    b.HasIndex("Movie_Context_ID");

                    b.HasIndex("Nominee_Awardable_ID");

                    b.HasIndex("Event_Name", "Category", "Award_Year", "Nominee_Awardable_ID", "Movie_Context_ID")
                        .IsUnique()
                        .HasDatabaseName("IX_UniqueNomination")
                        .HasFilter("[Movie_Context_ID] IS NOT NULL");

                    b.ToTable("Awards");
                });

            modelBuilder.Entity("MovieDB.Models.Entities.Awardable", b =>
                {
                    b.Property<int>("Awardable_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Awardable_ID"));

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Awardable_ID");

                    b.ToTable("Awardables");
                });

            modelBuilder.Entity("MovieDB.Models.Entities.Director", b =>
                {
                    b.Property<int>("Awardable_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birth_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Awardable_ID");

                    b.ToTable("Directors");
                });

            modelBuilder.Entity("MovieDB.Models.Entities.Movie", b =>
                {
                    b.Property<int>("Awardable_ID")
                        .HasColumnType("int");

                    b.Property<decimal?>("Budget")
                        .HasColumnType("decimal(15,2)");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Language")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PosterUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("Rating")
                        .HasColumnType("decimal(3,1)");

                    b.Property<DateTime>("Release_Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Revenue")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Awardable_ID");

                    b.HasIndex("Title", "Release_Date")
                        .IsUnique();

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("MovieDB.Models.Entities.MovieActor", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("MovieId", "ActorId");

                    b.HasIndex("ActorId");

                    b.ToTable("MovieActors");
                });

            modelBuilder.Entity("MovieDB.Models.Entities.MovieCompany", b =>
                {
                    b.Property<int>("Movie_ID")
                        .HasColumnType("int");

                    b.Property<int>("Company_ID")
                        .HasColumnType("int");

                    b.HasKey("Movie_ID", "Company_ID");

                    b.HasIndex("Company_ID");

                    b.ToTable("MovieCompanies");
                });

            modelBuilder.Entity("MovieDB.Models.Entities.MovieDirector", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("DirectorId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "DirectorId");

                    b.HasIndex("DirectorId");

                    b.ToTable("MovieDirectors");
                });

            modelBuilder.Entity("MovieDB.Models.Entities.MovieGenre", b =>
                {
                    b.Property<int>("Movie_ID")
                        .HasColumnType("int");

                    b.Property<string>("Genre")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Movie_ID", "Genre");

                    b.ToTable("MovieGenres");
                });

            modelBuilder.Entity("MovieDB.Models.Entities.ProductionCompany", b =>
                {
                    b.Property<int>("Company_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Company_ID"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Founded_Year")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Company_ID");

                    b.ToTable("ProductionCompanies");
                });

            modelBuilder.Entity("MovieDB.Models.Entities.Review", b =>
                {
                    b.Property<int>("Review_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Review_ID"));

                    b.Property<string>("Comment_Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date_Posted")
                        .HasColumnType("datetime2");

                    b.Property<int>("Movie_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Reviewer")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Review_ID");

                    b.HasIndex("Movie_ID");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("MovieDB.Models.Entities.Actor", b =>
                {
                    b.HasOne("MovieDB.Models.Entities.Awardable", "Awardable")
                        .WithOne("Actor")
                        .HasForeignKey("MovieDB.Models.Entities.Actor", "Awardable_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Awardable");
                });

            modelBuilder.Entity("MovieDB.Models.Entities.Award", b =>
                {
                    b.HasOne("MovieDB.Models.Entities.Awardable", null)
                        .WithMany("Awards")
                        .HasForeignKey("Awardable_ID");

                    b.HasOne("MovieDB.Models.Entities.Movie", "MovieContext")
                        .WithMany("NominationsAsContext")
                        .HasForeignKey("Movie_Context_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MovieDB.Models.Entities.Awardable", "Nominee")
                        .WithMany("NominationsReceived")
                        .HasForeignKey("Nominee_Awardable_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MovieContext");

                    b.Navigation("Nominee");
                });

            modelBuilder.Entity("MovieDB.Models.Entities.Director", b =>
                {
                    b.HasOne("MovieDB.Models.Entities.Awardable", "Awardable")
                        .WithOne("Director")
                        .HasForeignKey("MovieDB.Models.Entities.Director", "Awardable_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Awardable");
                });

            modelBuilder.Entity("MovieDB.Models.Entities.Movie", b =>
                {
                    b.HasOne("MovieDB.Models.Entities.Awardable", "Awardable")
                        .WithOne("Movie")
                        .HasForeignKey("MovieDB.Models.Entities.Movie", "Awardable_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Awardable");
                });

            modelBuilder.Entity("MovieDB.Models.Entities.MovieActor", b =>
                {
                    b.HasOne("MovieDB.Models.Entities.Actor", "Actor")
                        .WithMany("MovieActors")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MovieDB.Models.Entities.Movie", "Movie")
                        .WithMany("MovieActors")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MovieDB.Models.Entities.MovieCompany", b =>
                {
                    b.HasOne("MovieDB.Models.Entities.ProductionCompany", "ProductionCompany")
                        .WithMany("MovieCompanies")
                        .HasForeignKey("Company_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieDB.Models.Entities.Movie", "Movie")
                        .WithMany("MovieCompanies")
                        .HasForeignKey("Movie_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("ProductionCompany");
                });

            modelBuilder.Entity("MovieDB.Models.Entities.MovieDirector", b =>
                {
                    b.HasOne("MovieDB.Models.Entities.Director", "Director")
                        .WithMany("MovieDirectors")
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MovieDB.Models.Entities.Movie", "Movie")
                        .WithMany("MovieDirectors")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Director");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MovieDB.Models.Entities.MovieGenre", b =>
                {
                    b.HasOne("MovieDB.Models.Entities.Movie", "Movie")
                        .WithMany("MovieGenres")
                        .HasForeignKey("Movie_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MovieDB.Models.Entities.Review", b =>
                {
                    b.HasOne("MovieDB.Models.Entities.Movie", "Movie")
                        .WithMany("Reviews")
                        .HasForeignKey("Movie_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MovieDB.Models.Entities.Actor", b =>
                {
                    b.Navigation("MovieActors");
                });

            modelBuilder.Entity("MovieDB.Models.Entities.Awardable", b =>
                {
                    b.Navigation("Actor")
                        .IsRequired();

                    b.Navigation("Awards");

                    b.Navigation("Director")
                        .IsRequired();

                    b.Navigation("Movie")
                        .IsRequired();

                    b.Navigation("NominationsReceived");
                });

            modelBuilder.Entity("MovieDB.Models.Entities.Director", b =>
                {
                    b.Navigation("MovieDirectors");
                });

            modelBuilder.Entity("MovieDB.Models.Entities.Movie", b =>
                {
                    b.Navigation("MovieActors");

                    b.Navigation("MovieCompanies");

                    b.Navigation("MovieDirectors");

                    b.Navigation("MovieGenres");

                    b.Navigation("NominationsAsContext");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("MovieDB.Models.Entities.ProductionCompany", b =>
                {
                    b.Navigation("MovieCompanies");
                });
#pragma warning restore 612, 618
        }
    }
}
