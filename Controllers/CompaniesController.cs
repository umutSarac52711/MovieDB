using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using MovieDB.Data;
using MovieDB.Models;
using MovieDB.Models.Entities;
using System.Threading.Tasks; // Added for async operations

namespace MovieDB.Controllers;

public class CompaniesController : Controller // Renamed from ActorsController
{
    private readonly MovieDbContext dbContext;
    public CompaniesController(MovieDbContext dbContext) 
    {
        this.dbContext = dbContext;
    }
    
    [HttpGet]
    public IActionResult Add()
    {
        return View(new CompanyViewModel()); // Pass a new view model
    }

    [HttpPost]
    public async Task<IActionResult> Add(CompanyViewModel model) 
    {
        if (ModelState.IsValid)
        {
            // ProductionCompany is not an Awardable, so no Awardable entity creation needed.
            
            var productionCompany = new Company
                {
                    // Company_ID is auto-generated by the database
                    Name = model.Name, 
                    Country = model.Country,
                    Founded_Year = model.Founded_Year
                };
            
            await dbContext.Companies.AddAsync(productionCompany); 
            await dbContext.SaveChangesAsync(); 
            TempData["SuccessMessage"] = "Production Company successfully added!"; 
            return RedirectToAction(nameof(List));
        }
        return View(model);
    }

    [HttpGet]
    public async Task<IActionResult> List()
    {
        var companies = await dbContext.Companies.ToListAsync(); 

        return View(companies);
    }
    
    // Details view might not be needed if List and Edit provide enough info.
    // If you want a Details view, it would be similar to Edit(Get).
    // For now, I'm omitting it to keep it concise, let me know if you need it.
    
    [HttpGet]
    public async Task<IActionResult> Edit(int id) // id is Company_ID
    {
        var company = await dbContext.Companies
            .FirstOrDefaultAsync(c => c.Company_ID == id);

        if (company == null)
        {
            return NotFound();
        }

        var viewModel = new CompanyViewModel 
        {
            Company_ID = company.Company_ID,
            Name = company.Name, 
            Country = company.Country,
            Founded_Year = company.Founded_Year
        };

        return View(viewModel);
    }

    [HttpPost]
    public async Task<IActionResult> Edit(CompanyViewModel model) 
    {
        if (ModelState.IsValid)
        {
            var company = await dbContext.Companies
                .FirstOrDefaultAsync(c => c.Company_ID == model.Company_ID);

            if (company == null)
            {
                return NotFound();
            }

            company.Name = model.Name; 
            company.Country = model.Country;
            company.Founded_Year = model.Founded_Year;
            
            await dbContext.SaveChangesAsync();
            TempData["SuccessMessage"] = "Production Company successfully updated!"; 
            return RedirectToAction(nameof(List));
        }
        return View(model);
    }
    
    // Delete Get action to show a confirmation view
    [HttpGet]
    public async Task<IActionResult> Delete(int id)
    {
        var company = await dbContext.Companies
            .FirstOrDefaultAsync(c => c.Company_ID == id);

        if (company == null)
        {
            return NotFound();
        }
        // Pass the entity to the view for confirmation display
        return View(company); 
    }
    
    [HttpPost, ActionName("Delete")]
    public async Task<IActionResult> DeleteConfirmed(int id)
    {
        var company = await dbContext.Companies
            .Include(pc => pc.MovieCompanies) // Include related MovieCompanies for cascading delete or checking
            .FirstOrDefaultAsync(c => c.Company_ID == id);

        if (company == null)
        {
            return NotFound();
        }

        // Handle related MovieCompanies:
        // Option 1: If you want to delete MovieCompany entries associated with this ProductionCompany
        // dbContext.MovieCompanies.RemoveRange(company.MovieCompanies);
        // Option 2: If your database is set up for cascade delete on MovieCompany when ProductionCompany is deleted,
        // this might happen automatically.
        // Option 3: If you want to prevent deletion if there are associated movies, check company.MovieCompanies.Any()
        // For now, we'll just remove the company. Ensure your DB schema handles relations appropriately.

        dbContext.Companies.Remove(company); 
        
        // No Awardable entity to remove for ProductionCompany
        
        await dbContext.SaveChangesAsync();
        
        TempData["SuccessMessage"] = "Production Company successfully deleted!"; 
        return RedirectToAction(nameof(List));
    }
}
